import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Image;
import java.io.IOException;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author 11a5h
 */
public class GameJFrame extends javax.swing.JFrame {
    private MazeGenerator maze;
    private int size = 10;
    private int cellSize = 60;
    
    private final String wallImgPath = "wall.png";
    private final String floorImgPath = "floor.png";
    private final String startImgPath = "kright.png";
    private final String exitImgPath = "DoorWin.png";
    
    private int playerRow = 0;
    private int playerCol = 0;
    private boolean gameStarted = false;
    
    private enum ThuatToan {
        BFS("BFS"), 
        DFS("DFS"),
        ASTAR("A*"), 
        HILL_CLIMBING("Leo Đồi");
        
        private final String displayName;
        
        ThuatToan(String displayName) {
            this.displayName = displayName;
        }
        
        @Override
        public String toString() {
            return displayName;
        }
    }
    
    private ThuatToan tt = ThuatToan.BFS;
    private final int PANEL_WIDTH = 700;
    private final int PANEL_HEIGHT = 720;

    /**
     * Creates new form GameJFrame
     */
    public GameJFrame() {
        initComponents();
        setUpMazePanel();
        loadPathfindingAlgorithms();
        this.setLocationRelativeTo(null);
    }
    
    private void loadPathfindingAlgorithms() {
        cbAlgorithms.removeAllItems();
        for (ThuatToan algorithm : ThuatToan.values()) {
            cbAlgorithms.addItem(algorithm.toString());
        }
        cbAlgorithms.setSelectedIndex(0);
    }
    
    private void setUpMazePanel() {
        mazePanel.removeAll();
        
        calculateCellSize();
        
        drawPanel = new JPanel() {
            @Override
            protected void paintComponent(Graphics g) {
                super.paintComponent(g);
                if (maze != null) {
                    Image[][] tiles = maze.getTileImages();
                    int rows = maze.getRows();
                    int cols = maze.getCols();
                    for (int r = 0; r < rows; r++) {
                        for (int c = 0; c < cols; c++) {
                            if (tiles[r][c] != null) {
                                g.drawImage(tiles[r][c], c * cellSize, r * cellSize, cellSize, cellSize, null);
                            } else {
                                System.out.println("Null image at [" + r + "][" + c + "]");
                            }
                        }
                    }
                }
            }
        };
        
        drawPanel.setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));
        mazePanel.setLayout(new BorderLayout());
        mazePanel.add(drawPanel, BorderLayout.CENTER);
        mazePanel.revalidate();
        mazePanel.repaint();
    }
    
    private void calculateCellSize() {
        int cellWidth = PANEL_WIDTH / size;
        int cellHeight = PANEL_HEIGHT / size;
        cellSize = Math.min(cellWidth, cellHeight);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mazePanel = new javax.swing.JPanel();
        drawPanel = new javax.swing.JPanel();
        controlPanel = new javax.swing.JPanel();
        btnGenerate = new javax.swing.JButton();
        btnReset = new javax.swing.JButton();
        btnStart = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        cbAlgorithms = new javax.swing.JComboBox<>();
        lblAlgorithms = new javax.swing.JLabel();
        sliderMazeSize = new javax.swing.JSlider();
        lblMazeSize = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Tìm đường về nhà");
        setResizable(false);

        mazePanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        javax.swing.GroupLayout drawPanelLayout = new javax.swing.GroupLayout(drawPanel);
        drawPanel.setLayout(drawPanelLayout);
        drawPanelLayout.setHorizontalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 290, Short.MAX_VALUE)
        );
        drawPanelLayout.setVerticalGroup(
            drawPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout mazePanelLayout = new javax.swing.GroupLayout(mazePanel);
        mazePanel.setLayout(mazePanelLayout);
        mazePanelLayout.setHorizontalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mazePanelLayout.createSequentialGroup()
                .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(404, Short.MAX_VALUE))
        );
        mazePanelLayout.setVerticalGroup(
            mazePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(drawPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        controlPanel.setBorder(new javax.swing.border.SoftBevelBorder(javax.swing.border.BevelBorder.LOWERED));

        btnGenerate.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnGenerate.setText("Tạo mê cung");
        btnGenerate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnGenerateActionPerformed(evt);
            }
        });

        btnReset.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnReset.setText("Reset");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        btnStart.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnStart.setText("Bắt đầu");
        btnStart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStartActionPerformed(evt);
            }
        });

        btnExit.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        btnExit.setText("Thoát");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        cbAlgorithms.setFont(new java.awt.Font("Segoe UI", 0, 16)); // NOI18N
        cbAlgorithms.setMaximumRowCount(5);
        cbAlgorithms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbAlgorithmsActionPerformed(evt);
            }
        });

        lblAlgorithms.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblAlgorithms.setText("Lựa chọn thuật toán");

        sliderMazeSize.setFont(new java.awt.Font("Segoe UI", 0, 13)); // NOI18N
        sliderMazeSize.setMajorTickSpacing(10);
        sliderMazeSize.setMaximum(50);
        sliderMazeSize.setMinimum(10);
        sliderMazeSize.setMinorTickSpacing(5);
        sliderMazeSize.setPaintLabels(true);
        sliderMazeSize.setPaintTicks(true);
        sliderMazeSize.setSnapToTicks(true);
        sliderMazeSize.setValue(0);
        sliderMazeSize.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                sliderMazeSizeStateChanged(evt);
            }
        });

        lblMazeSize.setFont(new java.awt.Font("Segoe UI", 1, 16)); // NOI18N
        lblMazeSize.setText("Kích thước mê cung");

        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);
        controlPanel.setLayout(controlPanelLayout);
        controlPanelLayout.setHorizontalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(sliderMazeSize, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lblAlgorithms, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnStart, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExit, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(controlPanelLayout.createSequentialGroup()
                        .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 55, Short.MAX_VALUE)
                        .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(lblMazeSize, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(cbAlgorithms, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        controlPanelLayout.setVerticalGroup(
            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(controlPanelLayout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnReset, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnGenerate, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(37, 37, 37)
                .addComponent(lblMazeSize)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sliderMazeSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(lblAlgorithms)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(cbAlgorithms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(65, 65, 65)
                .addComponent(btnStart, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnExit, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(196, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(mazePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(mazePanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void sliderMazeSizeStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_sliderMazeSizeStateChanged
        // TODO add your handling code here:
        size = sliderMazeSize.getValue();
        lblMazeSize.setText("Kích thước mê cung: " + size + "x" + size);
        calculateCellSize();
        setUpMazePanel();
        if (maze != null) {
            mazePanel.repaint();
        }
    }//GEN-LAST:event_sliderMazeSizeStateChanged

    private void btnGenerateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnGenerateActionPerformed
        // TODO add your handling code here:
        try {
            playerRow = 0;
            playerCol = 0;
            gameStarted = false;
            maze = new MazeGenerator(size, size, wallImgPath, floorImgPath, startImgPath, exitImgPath);
            maze.debugGrid();
            drawPanel.setPreferredSize(new Dimension(size * cellSize, size * cellSize));
            mazePanel.revalidate();
            mazePanel.repaint();
        } catch (IOException ex) {
            JOptionPane.showMessageDialog(this,"Lỗi tải ảnh","Error",JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnGenerateActionPerformed

    private void cbAlgorithmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbAlgorithmsActionPerformed
        // TODO add your handling code here:
        String selectedAlgorithm = (String) cbAlgorithms.getSelectedItem();
        
        for (ThuatToan algorithm : ThuatToan.values()) {
            if (algorithm.toString().equals(selectedAlgorithm)) {
                tt = algorithm;
                break;
            }
        }
        updateUIForSelectedAlgorithm();
    }//GEN-LAST:event_cbAlgorithmsActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnResetActionPerformed

    private void btnStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStartActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnStartActionPerformed
    
    private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this,"Bạn có thoát khỏi trò chơi?","Xác nhận thoát",JOptionPane.YES_NO_OPTION);
    
        if (choice == JOptionPane.YES_OPTION) {
            System.exit(0);
        }
    }//GEN-LAST:event_btnExitActionPerformed

    private void updateUIForSelectedAlgorithm() {
        switch (tt) {
            case BFS:
                // Cập nhật UI cho thuật toán BFS
                break;
            case DFS:
                // Cập nhật UI cho thuật toán DFS
                break;
            case ASTAR:
                // Cập nhật UI cho thuật toán A*
                break;
            case HILL_CLIMBING:
                // Cập nhật UI cho thuật toán Greedy Best-First
                break;
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GameJFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new GameJFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnExit;
    private javax.swing.JButton btnGenerate;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnStart;
    private javax.swing.JComboBox<String> cbAlgorithms;
    private javax.swing.JPanel controlPanel;
    private javax.swing.JPanel drawPanel;
    private javax.swing.JLabel lblAlgorithms;
    private javax.swing.JLabel lblMazeSize;
    private javax.swing.JPanel mazePanel;
    private javax.swing.JSlider sliderMazeSize;
    // End of variables declaration//GEN-END:variables

}
